//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N, M, x, y;
            String S[] = read.readLine().split(" ");
            N = Integer.parseInt(S[0]);
            M = Integer.parseInt(S[1]);
            int a[][] = new int[N][M];
            for (int i = 0; i < N; i++) {
                String s[] = read.readLine().split(" ");
                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);
            }
            String s1[] = read.readLine().split(" ");
            x = Integer.parseInt(s1[0]);
            y = Integer.parseInt(s1[1]);
            Solution ob = new Solution();
            System.out.println(ob.shortestDistance(N, M, a, x, y));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Pair {
    int i, j, dist;
    Pair(int i, int j, int dist) {
        this.i = i;
        this.j = j;
        this.dist = dist;
    }
}


class Solution {
    int shortestDistance(int N, int M, int grid[][], int X, int Y) {
       int n = N;
        int m = M;
        boolean[][] vis = new boolean[n][m];
        
        Queue<Pair> helper = new LinkedList<>();
        
        if (grid[0][0] == 0) return -1;
        if (0 == X && 0 == Y) return 0;
        
        helper.offer(new Pair(0, 0, 0));
        vis[0][0] = true;
        
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        
        while (!helper.isEmpty()) {
            Pair cur = helper.poll();
            int topU = cur.i;
            int topV = cur.j;
            int topDist = cur.dist;
            
            for (int i = 0; i < 4; i++) {
                int nx = topU + dx[i];
                int ny = topV + dy[i];
                if (nx > -1 && ny > -1 && nx < n && ny < m && !vis[nx][ny] && grid[nx][ny] == 1) {
                    if (nx == X && ny == Y) {
                        return topDist + 1;
                    }
                    helper.offer(new Pair(nx, ny, topDist + 1));
                    vis[nx][ny] = true;
                }
            }
        }
        
        return -1;
    }
};//{ Driver Code Starts
// Initial Template for Java

import java.io.*;
import java.util.*;
class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N, M, x, y;
            String S[] = read.readLine().split(" ");
            N = Integer.parseInt(S[0]);
            M = Integer.parseInt(S[1]);
            int a[][] = new int[N][M];
            for (int i = 0; i < N; i++) {
                String s[] = read.readLine().split(" ");
                for (int j = 0; j < M; j++) a[i][j] = Integer.parseInt(s[j]);
            }
            String s1[] = read.readLine().split(" ");
            x = Integer.parseInt(s1[0]);
            y = Integer.parseInt(s1[1]);
            Solution ob = new Solution();
            System.out.println(ob.shortestDistance(N, M, a, x, y));
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Pair {
    int i, j, dist;
    Pair(int i, int j, int dist) {
        this.i = i;
        this.j = j;
        this.dist = dist;
    }
}


class Solution {
    int shortestDistance(int N, int M, int grid[][], int X, int Y) {
       int n = N;
        int m = M;
        boolean[][] vis = new boolean[n][m];
        
        Queue<Pair> helper = new LinkedList<>();
        
        if (grid[0][0] == 0) return -1;
        if (0 == X && 0 == Y) return 0;
        
        helper.offer(new Pair(0, 0, 0));
        vis[0][0] = true;
        
        int[] dx = {1, -1, 0, 0};
        int[] dy = {0, 0, 1, -1};
        
        while (!helper.isEmpty()) {
            Pair cur = helper.poll();
            int topU = cur.i;
            int topV = cur.j;
            int topDist = cur.dist;
            
            for (int i = 0; i < 4; i++) {
                int nx = topU + dx[i];
                int ny = topV + dy[i];
                if (nx > -1 && ny > -1 && nx < n && ny < m && !vis[nx][ny] && grid[nx][ny] == 1) {
                    if (nx == X && ny == Y) {
                        return topDist + 1;
                    }
                    helper.offer(new Pair(nx, ny, topDist + 1));
                    vis[nx][ny] = true;
                }
            }
        }
        
        return -1;
    }
};